apply plugin: 'com.android.library'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'com.kezong.fat-aar'

android {
    compileSdkVersion 35

    namespace 'io.castle.android'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 35
        buildConfigField 'int', 'VERSION_CODE', "1"
        buildConfigField 'String', 'VERSION_NAME', "\"" + VERSION_NAME + "\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    libraryVariants.configureEach { variant ->
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."

            /* add the excluded packages */
            exclude "**/R**"
            exclude "**/BuildConfig*"

            classpath = variant.javaCompiler.classpath + files(android.getBootClasspath()) + files("$buildDir/intermediates/classes/$variant.name")

            source = android.sourceSets.main.java.sourceFiles
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            destinationDir = project.file('../docs')
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }


    dexOptions {
        // Skip pre-dexing when running on CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !ciBuild
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility 17
        targetCompatibility 17
    }

    lint {
        abortOnError false
    }
}

dependencies {
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'com.squareup.tape2:tape:2.0.0-beta1'
    api 'com.scottyab:rootbeer-lib:0.1.1'
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'
    api 'androidx.core:core-ktx:1.16.0'
    embed(name: 'highwind-1.4.5', ext: 'aar', version: '1.4.5', group: 'io.castle.android.highwind')
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.6.1'
    testImplementation 'androidx.test:rules:1.6.1'
    testImplementation 'androidx.test.ext:junit:1.2.1'
    testImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    testImplementation 'org.robolectric:robolectric:4.14.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'org.awaitility:awaitility:4.3.0'
    testImplementation project(':castle:testsupport')
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestUtil 'androidx.test:orchestrator:1.5.1'

    if (ciBuild) {
        api fileTree(dir: 'libs', include: ['*.aar'])
    }
}

if (!ciBuild) {
    apply from: 'size.gradle'
}

mavenPublishing {
    publishToMavenCentral()
    signAllPublications()
}

repositories {
    flatDir {
        dirs 'libs/'
    }
}

afterEvaluate {
    tasks.named('extractDeepLinksDebug') {
        dependsOn "explodeIo.castle.android.highwindHighwind-${highwind_version}Debug"
    }
    tasks.named('extractDeepLinksRelease') {
        dependsOn "explodeIo.castle.android.highwindHighwind-${highwind_version}Release"
    }
}